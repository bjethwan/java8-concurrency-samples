package com.bjethwan;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class PriceCatalogueExample
{
	private final Catalogue catalogue = new Catalogue();
	private final PriceFinder priceFinder = new PriceFinder();
	private final AsyncExchangeServiceFaulty exchangeService = new AsyncExchangeServiceFaulty();
	private final ExecutorService executorService = Executors.newFixedThreadPool(10);

	public static void main(String[] args)
	{
		new PriceCatalogueExample().findLocalDiscountedPrice(Currency.CHF, "IphoneX");
	}

	private void findLocalDiscountedPrice(final Currency localCurrency, final String productName)
	{
		long time = System.currentTimeMillis();

		lookupProductByName(productName)
			.thenComposeAsync(this::findBestPrice, executorService)
			.thenCombineAsync(exchangeService.lookupExchangeRateAsync(Currency.USD, localCurrency), this::exchange)
			.thenApply(localPrice -> {
				String output = String.format("A %s will cost us %f %s\n", productName, localPrice, localCurrency);
				output += String.format("It took us %d ms to calculate this\n", System.currentTimeMillis() - time);
				return output;
			})
			.thenAccept(System.out::println)
			.join();
	}

	private CompletableFuture<Product> lookupProductByName(String productName){
		return CompletableFuture.supplyAsync(()->catalogue.productByName(productName), executorService);
	}
	private CompletableFuture<Price> findBestPrice(Product product){
		return CompletableFuture.supplyAsync(()->priceFinder.findBestPrice(product));
	}
	private CompletableFuture<Double> lookupExchangeRate(Currency source, Currency destination){
		return CompletableFuture.supplyAsync(()-> exchangeService.lookupExchangeRate(source, destination));
	}
	private double exchange(Price price, double exchangeRate)
	{
		return Utils.round(price.getAmount() * exchangeRate);
	}

}
