package com.bjethwan;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

class Producer implements Runnable {
	private final BlockingQueue<Integer> queue;
	private int counter;
	Producer(BlockingQueue<Integer> q) { queue = q; counter=0;}
	public void run() {
		try {
			while (true) { queue.put(produce()); }
		} catch (InterruptedException ex) {ex.printStackTrace();}
	}
	Integer produce() { return ++counter;}
}

class Consumer implements Runnable {
	private final BlockingQueue<Integer> queue;
	Consumer(BlockingQueue<Integer> q) { queue = q; }
	public void run() {
		try {
			while (true) { consume(queue.take()); }
		} catch (InterruptedException ex) {ex.printStackTrace();}
	}
	void consume(Integer x) {  }
}

public class Main {
	void main() {
		BlockingQueue<Integer> q = new LinkedBlockingQueue<>(10);
		Producer p = new Producer(q);
		Consumer c1 = new Consumer(q);
		Consumer c2 = new Consumer(q);
		new Thread(p).start();
		new Thread(c1).start();
		new Thread(c2).start();
		for(;;)
			System.out.println(q);
	}
}
